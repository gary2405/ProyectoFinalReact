{
  "users": [
    {
      "id": "f357",
      "name": "vic",
      "email": "1"
    }
  ],
  "productos": [
    {
      "id": "48fc",
      "nombre": "naranja",
      "precio": "1000",
      "ingredientes": "naranja",
      "url": "npm install @sweetalert2/themes"
    },
    {
      "nombre": "bgvdhbgfxhb",
      "precio": "475643876",
      "ingredientes": "hbdvhb ",
      "imgurl": "import { useState, useEffect } from 'react'; import productosPost from '../services/productospost'; import productosGET from '../services/productosget'; import productosDelete from '../services/productosDelete'; import productosPUT from '../services/productosput'; import Card from 'react-bootstrap/Card'; import swal from 'sweetalert'; const ProductsPage = () => {   const [Helados, setHelados] = useState([]);   const [nombre, setNombre] = useState('');   const [precio, setPrecio] = useState('');   const [ingredientes, setIngredientes] = useState('');   const [imgurl, setImgUrl] = useState('');   const [productoEdit, setProductoEdit] = useState(null);   useEffect(() => {     const fetchHelados = async () => {       try {         const data = await productosGET();         setHelados(data);       } catch (error) {         console.error(\"Error al obtener productos:\", error);       }     };     fetchHelados();   }, []);   const manejarSubmit = async (e) => {     e.preventDefault();     try {       if (productoEdit !== null) {         const actualizadoProducto = await productosPUT(productoEdit.id, nombre, precio, ingredientes, imgurl);         if (actualizadoProducto) {           const nuevaListaHelados = Helados.map(b => (b.id === productoEdit.id ? actualizadoProducto : b));           setHelados(nuevaListaHelados);           setProductoEdit(null);         }       } else {         const nuevoProducto = await productosPost(nombre, precio, ingredientes, imgurl);         if (nuevoProducto) {           setHelados([...Helados, nuevoProducto]);         }       }       setNombre('');       setPrecio('');       setIngredientes('');       setImgUrl('');     } catch (error) {       console.error(\"Error al manejar el submit:\", error);     }   };   const eliminarhelado = async (id) => {     try {       const confirmacion = await swal({         title: \"¿Estás seguro?\",         text: \"No podrás revertir esto!\",         icon: \"warning\",         buttons: {           cancel: {             text: \"No, cancelar\",             visible: true,             className: \"btn btn-danger\",             closeModal: true,           },           confirm: {             text: \"Sí, eliminarlo!\",             className: \"btn btn-success\",             closeModal: true,           },         },         dangerMode: true,       });       if (confirmacion) {         const eliminacionExitoso = await productosDelete(id);         if (eliminacionExitoso) {           const nuevaListaHelados = Helados.filter(helado => helado.id !== id);           setHelados(nuevaListaHelados);           swal(\"¡Eliminado!\", \"El producto ha sido eliminado.\", \"success\");         } else {           swal(\"Error\", \"Hubo un problema al eliminar el producto.\", \"error\");         }       } else {         swal(\"Cancelado\", \"Tu producto está seguro :)\", \"error\");       }     } catch (error) {       console.error(\"Error al eliminar producto:\", error);       swal(\"Error\", \"Hubo un problema al eliminar el producto.\", \"error\");     }   };   const iniciarEdicion = (producto) => {     setProductoEdit(producto);     setNombre(producto.nombre);     setPrecio(producto.precio);     setIngredientes(producto.ingredientes);     setImgUrl(producto.imgurl);   };   return (     <div>       <div className='formProductos'>         <form onSubmit={manejarSubmit}>           <label>Nombre:</label>           <input             value={nombre}             onChange={(e) => setNombre(e.target.value)}             required           />           <label>Precio:</label>           <input             type=\"number\"             value={precio}             onChange={(e) => setPrecio(e.target.value)}             required           />           <label>Ingredientes:</label>           <input             value={ingredientes}             onChange={(e) => setIngredientes(e.target.value)}             required           />           <label>URL:</label>           <input             value={imgurl}             onChange={(e) => setImgUrl(e.target.value)}             required           />           <button type=\"submit\">             {productoEdit !== null ? 'Guardar Cambios' : 'Agregar'}           </button>         </form>         <div className='cardscolumns'>           {Helados.length === 0 ? (             <p>No hay productos disponibles</p>           ) : (             Helados.map(helado => (               <ul key={helado.id}>                 <br />                 <Card className='cardproductos'>                   <Card.Body>                     <Card.Title>{helado.nombre}</Card.Title>                     <Card.Text>                       ${helado.precio} <br />{helado.ingredientes}                     </Card.Text>                     <button onClick={() => iniciarEdicion(helado)}>Editar</button>                     <button onClick={() => eliminarhelado(helado.id)}>Eliminar</button>                   </Card.Body>                 </Card>               </ul>             ))           )}         </div>       </div>     </div>   ); }; export default ProductsPage;",
      "id": "9f8f"
    }
  ]
}